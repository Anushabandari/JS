=== vs == vs = ?
 "=" is used to assign a value to a variable.
  ex: var i= 10
 "==" is used to compare only values.
  ex: 1==1 - true 
      1=="1" - true 
  Note: == does the type coersion (converts into similar type.)   
"===" is used to compare both value and datatypes.
  ex: 1===1 - true 
      1==="1" - false(comparing datatype).
-----------------------------------------------------------------------------------------
Is JS case sensitive ?

Yes!
 example: var i=1;
          var I=2;
          both i and I are different.
-------------------------------------------------------------------------------------------
variable scope in JS ?
Two types of scopes in javascript
-global scope. (Window scope)
  global scope is that scope which is visible and accessible by all other scopes. can be accessed anywhere in the application.
  Ex: var i= "global scope" 
  variables not decalred with var keyword  also have global scope.
  Ex: i="something" //globalscope.
-local scope.      
   Variables declared in a function are local scope and cannot be accessed outside the function.
   Ex: function work(){
        var i="local scope";
       }
 note:Global variables can be accessed in the function but local variables cannot be accessed outside the function.
 ---------------------------------------------------------------------------------------
 Lexical scope -
 
 Inner function having access to the outer function variables is called lexical scope.
 ex: function outerfunc(){
     var q=1000;
     function innerfunc(){
       q=1200; // lexical scope
     }
 }
 --------------------------------------------------------------------------------------
 Undefined vs not defined
  undefined- variable is declared but value is not assigned. 
             ex: var i;
             console.log(i) //undefined.
  not defined- variable not declared and not assigned.
               ex: console.log(name);
               //name is not defined
 ----------------------------------------------------------------------------------
 Hoisting:
 Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of 
 their scope before code execution.
 Two types of hoisting : variable and fucntion hoisting.
  Ex: function add(){
     console.log(i); // variable hoisting
      var i=10;
        work(); //functional hoisting
       function work(){
       }
  }
----------------------------------------------------------------------------------------------------------------
 Closure:
 
 Function inside another function where the inner function can access the scope of the outer function.
 ex: function outer(){
     var y;
     function inner(){
        console.log(y)
     }
    return inner; 
 }
 ----------------------------------------------------------------------------------------------------------------
 value type vs reference type
 
 value type : primitive types are value types that creates a new memory whenever we assign a value.
 ex: var i=10;
     var j=i;// new memory is created for j , if we change i value,j wont change.
     i= 98;  // this wont change j value.
     j=12; // this wont change i value.
reference type: arrays and objects are reference types where variables share memory.
ex: var array1=[1,2,3,4];
    var array2=array1;     
    array1.push(10) //changing array2 or array1 changes both the variables data because of ref type.
    array2.push(80)// changing array2 or array1 changes both the variables data because of ref type.
    
    note: if u assign array1 to a new data array2 will not have a pointer to array1.
    ex: array1=[1,3,8,8];// this wont change array2 data
 -----------------------------------------------------------------------------------------------------------------
var vs let vs const
 all the above are used to declare  variables.
 var
   -has functional scope.
   -will be hoisted .
   ex:
      function add(){
       var name="anusha"; //this is a functional scope and cannot be accessed outside.
       {
         let age  = 34; //this can't be accessed outside
       }
       console.log(age); //is not defined
      }
let
   -has block scope.
   -will not be hoisted.
   ex:
      {
       let name="anusha"; //this is a block scope and cannot be accessed outside.
      }
const
   -read only value.
   -cannot be reassigned
   -has block scope.
   -will not be hoisted.
   eg: const i = 20;
        i = 80;// error, this is readonly.
   note: nested object values can be changed.
   eg: const person = {
                     name:"amisha",
                     age: 30
                    };
                    
           person.age = 40; // this is allowed
           person = { gender: "male"} // error, this is readonly
 --------------------------------------------------------------------------------------
 callback
 Any function that is passed as an argument to another function for later execution is called a callback function
 eg: function add(){
     }
     
     function load(fn){
      fn();
     }
     
     load(add);// passing add function as a callback to load funtion
-----------------------------------------------------------------------------------------
parseInt()-

This function parses a string and returns an integer.
-----------------------------------------------------------------------------------------
split()-
This method is used to split the string into an array of substrings.
-----------------------------------------------------------------------------------------
join()-
 
 the join methods creates and returns a new string by concatenating all of the elements in an array.
-----------------------------------------------------------------------------------------
typeof

the typeof operator is used to return the datatype (returns a string) of its operand. 
-------------------------------------------------------------------------------------------
Object.freeze()-
This method freezes an object. A frozen object cannot be changed.  Freezing an object prevents new properties from being added to it, existing 
properties from being removed, prevents changing the enumerability, configurability and writability of existing properties.
---------------------------------------------------------------------------------------------
polyfills-

polyfill is a piece of code (usually javascript on the web) used to provide modern functionality 
on older browsers that do not natively support it.
-----------------------------------------------------------------------------------------------
Call back hell-

It is any code in javascript where the use of function callbacks in async code becomes difficult or obscure to follow. 
Generally when there is more than one level of indirection, code using callbacks can become harder to follow, 
harder to refactor, and harder to test.
-----------------------------------------------------------------------------------------------------
Arrow function-
They,re more terse(sparing in the use of words). They make managing 'This' keyword easy.

----------------------------------------------------------------------------------------------------
fetch
fetch is a moderm way of sending network request and get information from the server.
fetch(url,{
  method:"get"/"post",
  body:json.stringify(data),
  headers:{
    Content-Type:"application/json"
    }
})

---------------------------------------------------------------------------------------------------------
classes-
---------------------------------------------------------------------------------------------------------
Try/catch/throw

try:The try block contains set of statements where an exception can occur.

catch:Catch block is used to handle the uncertain condition of try block. 
       A try block is always followed by a catch block, which handles the exception that 
       occurs in associated try block.
throw: Throw keyword is used to transfer control from try block to catch block.
-------------------------------------------------------------------------------------------------------------
Rest operator-
The rest parameter syntax allows us to represent an indefinite number of arguments as an array.
 ------------------------------------------------------------------------------------------------------------
 Window-
 Window is a parent object of the browser.
 ------------------------------------------------------------------------------------------------------------
 Async await-
 

   
