=== vs == vs = ?
 "=" is used to assign a value to a variable.
  ex: var i= 10
 "==" is used to compare only values.
  ex: 1==1 - true 
      1=="1" - true 
  Note: == does the type coersion (converts into similar type.)   
"===" is used to compare both value and datatypes.
  ex: 1===1 - true 
      1==="1" - false(comparing datatype).
-----------------------------------------------------------------------------------------
Is JS case sensitive ?

Yes!
 example: var i=1;
          var I=2;
          both i and I are different.
-------------------------------------------------------------------------------------------
variable scope in JS ?
Two types of scopes in javascript
-global scope. (Window scope)
  global scope is that scope which is visible and accessible by all other scopes. can be accessed anywhere in the application.
  Ex: var i= "global scope" 
  variables not decalred with var keyword  also have global scope.
  Ex: i="something" //globalscope.
-local scope.      
   Variables declared in a function are local scope and cannot be accessed outside the function.
   Ex: function work(){
        var i="local scope";
       }
 note:Global variables can be accessed in the function but local variables cannot be accessed outside the function.
 ---------------------------------------------------------------------------------------
 Lexical scope -
 
 Inner function having access to the outer function variables is called lexical scope.
 ex: function outerfunc(){
     var q=1000;
     function innerfunc(){
       q=1200; // lexical scope
     }
 }
 --------------------------------------------------------------------------------------
 Undefined vs not defined
  undefined- variable is declared but value is not assigned. 
             ex: var i;
             console.log(i) //undefined.
  not defined- variable not declared and not assigned.
               ex: console.log(name);
               //name is not defined
 ----------------------------------------------------------------------------------
 Hoisting:
 Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of 
 their scope before code execution.
 Two types of hoisting : variable and fucntion hoisting.
  Ex: function add(){
     console.log(i); // variable hoisting
      var i=10;
        work(); //functional hoisting
       function work(){
       }
  }
----------------------------------------------------------------------------------------------------------------
 Closure:
 
 Function inside another function where the inner function can access the scope of the outer function.
 ex: function outer(){
     var y;
     function inner(){
        console.log(y)
     }
    return inner; 
 }
 ----------------------------------------------------------------------------------------------------------------
 value type vs reference type
 
 value type : primitive types are value types that creates a new memory whenever we assign a value.
 ex: var i=10;
     var j=i;// new memory is created for j , if we change i value,j wont change.
     i= 98;  // this wont change j value.
     j=12; // this wont change i value.
reference type: arrays and objects are reference types where variables share memory.
ex: var array1=[1,2,3,4];
    var array2=array1;     
    array1.push(10) //changing array2 or array1 changes both the variables data because of ref type.
    array2.push(80)// changing array2 or array1 changes both the variables data because of ref type.
    
    note: if u assign array1 to a new data array2 will not have a pointer to array1.
    ex: array1=[1,3,8,8];// this wont change array2 data
 -----------------------------------------------------------------------------------------------------------------
var vs let vs const
 all the above are used to declare  variables.
 var
   -has functional scope.
   -will be hoisted .
   ex:
      function add(){
       var name="anusha"; //this is a functional scope and cannot be accessed outside.
       {
         let age  = 34; //this can't be accessed outside
       }
       console.log(age); //is not defined
      }
let
   -has block scope.
   -will not be hoisted.
   ex:
      {
       let name="anusha"; //this is a block scope and cannot be accessed outside.
      }
const
   -read only value.
   -cannot be reassigned
   -has block scope.
   -will not be hoisted.
   eg: const i = 20;
        i = 80;// error, this is readonly.
   note: nested object values can be changed.
   eg: const person = {
                     name:"amisha",
                     age: 30
                    };
                    
           person.age = 40; // this is allowed
           person = { gender: "male"} // error, this is readonly
 --------------------------------------------------------------------------------------
 callback
 Any function that is passed as an argument to another function for later execution is called a callback function
 eg: function add(){
     }
     
     function load(fn){
      fn();
     }
     
     load(add);// passing add function as a callback to load funtion
-----------------------------------------------------------------------------------------
parseInt()-

This function parses a string and returns an integer.

usage:
parseInt("1") //output 1

parseInt("anu") //output NaN
-----------------------------------------------------------------------------------------
split()-
Converts string to an array with a delimiter.

usage:
var input= "Anusha is a girl";

input.split(" "); //output ["Anusha", "is", "a", "girl"]
-----------------------------------------------------------------------------------------
join()-
 
Converts an array to string with a delimeter.

usage:
var input=  ["Anusha", "is", "a", "girl"]

input.join(" "); //output "Anusha is a girl"; 
-----------------------------------------------------------------------------------------
typeof

the typeof operator is used to return the datatype of a variable.

example:
 typeof 1 // "number"
 typeof "Anusha" // "string"
 typeof true // "boolean"
 typeof undefined // "undefined"
 typeof {} // "object"
 typeof function // "function"
 typeof [ ]// "object"
 typeof null // "object"
 
 note : except array and null which returns object all other datatypes returns its corresponding data type.
-------------------------------------------------------------------------------------------
Object.freeze()-
It prevents changes(addition/deletion/modification) to an object.
usage:

var xyz={
 name: "abc"
};

Object.freeze(xyz);
xyz.name = "def" //throws an error
---------------------------------------------------------------------------------------------
polyfills-

polyfill is a piece of code (usually javascript on the web) used to provide modern functionality 
on older browsers that do not natively support it.

note :

we can use babel polyfills to resolve this issue.
-----------------------------------------------------------------------------------------------
Asynchronous-
Javascript is asynchronous which allows multiple things to happen at the same time.
 
Multiple things happening at the same time.
----------------------------------------------------------------------------------------------
XMLHttpRequest:This object is used to make Http request from client to server using javascript.

Usage: 

var apiCall= new XMLHttpRequest();
apiCall.open("get/post",url,"true/false") //true means async, false means synchronous

apiCall.send() //you need to pass data in the send function

apiCall.onReadyStateChange= function(){
  if(apiCall.status==200){
   //that means apiCall is successfull, we can write code here to execute.
   }
}
-----------------------------------------------------------------------------------------------
Call back hell-

Writing nested call back functions for synchronous programming, which makes the code not readable 
and hard to debug is called call back hell.

example:

after a payment apiCall success, call database api, then call email api and so on. All these are nested call backs. 
----------------------------------------------------------------------------------------------------------
promise -
 promise are used to handle asynchronous operations. It is an alternate approach for callback for 
 reducing call back hell and writing cleaner code.
 
 example:
 
 We use then()  which takes two callback functions as parameters , one for success and one for failure.
 -------------------------------------------------------------------------------------------------------
 async/await
 
 Its a new way to write asynchronous code. It makes asynchronous code look and behave like synchronous code.
 
 usage:
 
 var makeRequest= async () =>{
   await callPayment();
   await callDBUpdate();
   await callSendEmail();
 }
 --------------------------------------------------------------------------------------------------------
 fetch
fetch is a moderm way of sending network request and get information from the server.
fetch(url,{
  method:"get"/"post",
  body:json.stringify(data),
  headers:{
    Content-Type:"application/json"
    }
})
---------------------------------------------------------------------------------------------------------
ECMAScript 5 features

1.Array.isArray() //determines whether a variable is an array or not.
2. Array.forEach()//to iterate through the array.
3. Array.map()
4.Array.filter()
-----------------------------------------------------------------------------------------------------------
ECMA6 features
1.Let 
2.Const
3.Spread Operator.
4.Set
5.Map
----------------------------------------------------------------------------------------------------------
Arrow function-
They,re more terse(sparing in the use of words). They make managing 'This' keyword easy.
---------------------------------------------------------------------------------------------------------
Try/catch/throw

try:The try block contains set of statements where an exception can occur.

catch:Catch block is used to handle the uncertain condition of try block. 
       A try block is always followed by a catch block, which handles the exception that 
       occurs in associated try block.
throw: Throw keyword is used to transfer control from try block to catch block.
-------------------------------------------------------------------------------------------------------------
Rest operator-
The rest parameter syntax allows us to represent an indefinite number of arguments as an array.
 ------------------------------------------------------------------------------------------------------------
 Window-
 Window is a parent object of the browser.
 ------------------------------------------------------------------------------------------------------------
Call/Apply/Bind

All the three functions are used to execute a function with a given "this" value.

call- invokes a function and allows you to pass parameters comma separated
      example - function invite(greeting1,greeting2){
        return greeting1 + ' ' +this.firstName+ ' ' + this.lastName+ ' '+greeting2;
      }
   
   var employee1={
      firstName:"akil",
      lastName:"akula"
    }
  
  invite.call(employee1,'Hello','How are you?'); // Hello akil akula how are you?
  
  apply- invokes a function and allows you to pass parameters in an array
      example - function invite(greeting1,greeting2){
        return greeting1 + ' ' +this.firstName+ ' ' + this.lastName+ ' '+greeting2;
      }
   
   var employee1={
      firstName:"akil",
      lastName:"akula"
    }
  
  invite.call(employee1,['Hello','How are you?']); // Hello akil akula how are you?
  
  Bind()
  
  It returns a new function and allows you to pass any no of arguments later.
  
     example - function invite(greeting1,greeting2){
        return greeting1 + ' ' +this.firstName+ ' ' + this.lastName+ ' '+greeting2;
      }
   
   var employee1={
      firstName:"akil",
      lastName:"akula"
    }
  
  var callMeLater= invite.bind(employee1,'hello'); 
  callMeLater('how are you?');// Hello akil akula how are you?
  
  Note: call and apply are executed immediately where bind returns a new function to execute it later.
  ----------------------------------------------------------------------------------------------------------------
  classes-
  
  -----------------------------------------------------------------------------------------------------------------
  Array.isArray()
  It is used to check if the variable is array or not.
  
  example: var nums = [];
  
          Array.isArray(nums);// true
          
--------------------------------------------------------------------------------------------------------------------
spread operator- 

this operator allows arrays/pbjects/strings to be expanded intosingle arguments.
example: function add(a,b,c){}
   
    var nums=[1,2,3];
    add(...nums)
example : assigning the existing array to a new array with new memory allocation with spread operator.
      var nums2=[...nums]
--------------------------------------------------------------------------------------------------------------------
Rest parameter-

It is a new way to handle function parameter which allows us to represent an indefinite no. of arguments as an array.

 Example: function add(a,b,...otherElements){}
      add(1,2,3,4,5,6); // a=1,b=2, otherElements=[3,4,5,6]
--------------------------------------------------------------------------------------------------------------------
Destructuring assignment - It assigns the values from arrays or properties from objects into distinct variables.
 example : var obj={
  name:"kitty",
  age="16"
 }
 
 var {name,age}=obj
--------------------------------------------------------------------------------------------------------------------
Array:

Push - To add an element at the end of an array.
Pop - to delete an element from an end of an array.
unShift- To add an element at the beginning of an array
shift- To delete an element from the beginning of an array.
slice- It deletes the elements from the array using the starting and ending index.
splice- it delets the elements from the array with start index and the no of elements
         that have to be removed from the array and it modifies the parent array.
   Note:Splice modifies the parent array whereas slice dont.
indexOf- it returns the index of the element if it is present in the array or else it returns -1.
----------------------------------------------------------------------------------------------------------------------
Array:

foreach:Used to iterate the arrayand doesnt return any new array.
 example : var num= [1,2,3,4]
          num.foreach((value,index)=>{
            //ur code here
          })
Map: Used to iterate the array and returns a new array without modifying the parent array.
  example : var num= [1,2,3,4]
          var result=num.map((value,index)=>{
            //ur code here
          })
filter: used to filter the elements and returns a new array without modying the parent array.
  example : var num= [1,2,3,4]
          var result=num.filter((value,index)=>{
            //ur code here
          })
reduce: It executes a given function on each element in an array resulting in a single output value.
    example : var num= [1,2,3,4]
        var result= num.reduce((initialValue,value,index)=>{
            //ur code here
          },intinalValue)
-----------------------------------------------------------------------------------------------------------------------
 Default parameters (ES5 feature)
 
 It allows function parameters to have default values initialized if no value or undefined is passed.
 example: function add(a=1,b=0){
 return a+b;
 }
 
 add(10) //return 10
 
 add()//returns 1
 
 add(2,3)//returns 5
 
 --------------------------------------------------------------------------------------------------------
 Https status codes -
 
 200- success
 300- redirect
 400- client error
 403- forbidden
 404- not found
 500-server error
----------------------------------------------------------------------------------------------------------
Event bubbling/ delegation/propagation.

When an event happens on an element it first runs the event handlers on it, 
then on its parent then all the way up elements.

example : <html>
 <div onclick="handleClick1()">
  <div onclick="handleClick2()">
     <button onclick="handleClick()">Submit</button>
  </div>
 </div>
</html>
  
  when user clicks on button it first calls handleClick() then handleClick2() and then handleClick1() and so,on.... 
  To stop this from happening use event.stopPropagation();
  -------------------------------------------------------------------------------------------------------------------------
  use strict-
  instructs the browser to use the strict mode, this will catch the errors. 
  This can be used inside a function or for a complete file.
  
  1) Disallows global variables.
  2)It ensures object keys are unique.
  3)Function parameters must be unique.
  
  usage: "use strict";
  ---------------------------------------------------------------------------------------------------------------------------
  Namespace- It avoids collisions with other objects or variables in the global name space.
  
  syntax: var app= app || {}
  ---------------------------------------------------------------------------------------------------------------------------
  Class-  Class is a blue print of an object. It contains functions and variables.
          JS classes are syntactical sugar over javacsripts existing existing prototype based inheritance.
  example: class Rectangle {
       constructor(height,width){
        this.height= height,
        this.width=width
       }
  }
  
  var obj=new Rectangle(1,2)
  
  typeof class is a function.
-----------------------------------------------------------------------------------------------------------------------------         
